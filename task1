import pandas as pd
import numpy as np
from statsmodels.tsa.filters.hp_filter import hpfilter
import matplotlib.pyplot as plt

# 1. データ読み込み（GDPC1.csv）と日付をDatetimeIndexに設定
df = pd.read_csv('GDPC1.csv', index_col='DATE', parse_dates=True)

# 2. 自然対数を取った列を追加
df['log_GDP'] = np.log(df['GDPC1'])

# 3. HPフィルターを適用してトレンドと循環を抽出（λ=10, 100, 1600）
cycle10, trend10 = hpfilter(df['log_GDP'], lamb=10)
cycle100, trend100 = hpfilter(df['log_GDP'], lamb=100)
cycle1600, trend1600 = hpfilter(df['log_GDP'], lamb=1600)

# データフレームに結果を格納
df['trend_lambda10'] = trend10
df['cycle_lambda10'] = cycle10
df['trend_lambda100'] = trend100
df['cycle_lambda100'] = cycle100
df['trend_lambda1600'] = trend1600
df['cycle_lambda1600'] = cycle1600

# 4. 元のGDP（対数）と各トレンド成分をプロット
plt.figure(figsize=(10,6))
plt.plot(df.index, df['log_GDP'], label='Log Real GDP (actual)', color='black', linewidth=2)
plt.plot(df.index, df['trend_lambda10'], label='Trend (lambda=10)', color='red', linestyle='--')
plt.plot(df.index, df['trend_lambda100'], label='Trend (lambda=100)', color='blue', linestyle='-.')
plt.plot(df.index, df['trend_lambda1600'], label='Trend (lambda=1600)', color='green', linestyle=':')
plt.xlabel('Year'); plt.ylabel('Log Real GDP')
plt.legend(); plt.tight_layout()
plt.savefig('trend_plot.png')  # 図をPNGファイルとして保存

# 5. 循環成分をプロット（％表示のため100倍）
plt.figure(figsize=(10,6))
plt.plot(df.index, df['cycle_lambda10']*100, label='Cycle (lambda=10)', color='red')
plt.plot(df.index, df['cycle_lambda100']*100, label='Cycle (lambda=100)', color='blue')
plt.plot(df.index, df['cycle_lambda1600']*100, label='Cycle (lambda=1600)', color='green')
plt.axhline(y=0, color='black', linewidth=0.8)  # ゼロ線
plt.xlabel('Year'); plt.ylabel('Deviation from Trend (%)')
plt.legend(); plt.tight_layout()
plt.savefig('cycle_plot.png')  # 図をPNGファイルとして保存
